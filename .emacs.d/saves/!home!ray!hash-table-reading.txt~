Hash Tables
===========

Very popular! Variety of names:
	Dictionary
	Map
	Keyed Table
	Hash
Collections of key/balue pairs that make it easy to reference by key

Should be easy to add or remove things, create a new structure, or look things up by key


Getting started
---------------

(make-hash) create an empty structure I bet

(hash-set! hash-name key value) set or create an item, does not care which function you're using

(hash-ref hash-name key) -> value (if it exists, otherwise errors out)

(hash-ref hash-name key fallback) -> value (if it doesn't exist, return fallback)

(hash-has-key? key) -> boolean


Displaying them
---------------

Tables start with '#hash((key1 . value1) (key2 . value2) (...))
	Notice that the key/value pairs use dot notation
We can also create a hash with this sorta formatting. Note that the 
keys don't necessarily come out in the same order they went in, but this
doesn't matter.

HOWEVER! If we do it this way, our hash is immutable. 
That means that hash-set! will not work, no matter what. Vectors work the same way.

If we want our hash to be mutable, we need to use make-hash differently.

(define animals
  (make-hash (list (cons "A" "Anteater")
                   (cons "B" "Baboon")
		   ...)))

This is mutable and all that good stuff that we probably want.


